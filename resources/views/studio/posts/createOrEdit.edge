@layout('layouts/studio')

@section('heading')
  @studio.heading({
    heading: post?.id ? 'Update Post' : 'Create New Posts',
    wrapSlot: true
  })
    <div class="space-x-3">
      @button({ onClick: `saveAs(${StateEnum.PUBLIC})`, id: 'btnPublish' })
        Publish
      @end

      @if (!post?.id || post?.stateId === StateEnum.DRAFT)
        @button({ onClick: `saveAs(${StateEnum.DRAFT})`, variant: 'baseSecondary' })
          Save As Draft
        @end
      @endif

      @button({ onClick: `saveAs(${StateEnum.UNLISTED})`, variant: 'baseSecondary' })
        {{ post?.id ? 'Switch To' : 'Save As' }} Unlisted
      @end

      @button({ onClick: `saveAs(${StateEnum.PRIVATE})`, variant: 'baseSecondary' })
        {{ post?.id ? 'Switch To' : 'Save As' }} Private
      @end
    </div>
  @end
@endsection

@section('content')

  @set('action', route('studio.posts.store'))

  @if(post?.id)
    @set('action', route('studio.posts.update', { id: post.id}, { qs: { _method: 'PUT' }}))
  @endif

  <form name="postForm" method="POST" action="{{ action }}">
    {{ csrfField() }}
    <input type="hidden" name="timezone" value="" />
    <input type="hidden" name="stateId" value="{{ post?.stateId ?? StateEnum.DRAFT }}" />

    <div class="flex flex-wrap -mx-3">
      <div class="w-full lg:w-2/3 lg:px-3">
        @!form.input.alt({
          label: 'Title',
          name: 'title',
          placeholder: 'Enter a concise & descriptive title',
          value: flashMessages.get('title') ?? post?.title,
          errors: flashMessages.get('errors.title'),
          required: true,
          max: 100,
          title: true
        })

        @!form.input.alt({
          label: 'Slug',
          name: 'slug',
          placeholder: 'Enter a unique url safe identifier',
          help: 'Will auto generate from title if left empty',
          value: flashMessages.get('slug') ?? post?.slug ?? '',
          errors: flashMessages.get('errors.slug'),
          max: 255
        })

        @!form.input.alt({
          type: 'textarea',
          label: 'Description',
          name: 'description',
          placeholder: 'Enter a high-level overview of your post',
          value: flashMessages.get('description') ?? post?.description ?? '',
          errors: flashMessages.get('errors.description'),
          rows: 3,
          max: 255
        })

        @form.input.alt({
          type: 'group',
          label: 'Publish At',
          help: 'Will default to now if left empty'
        })
          @slot('input')
            <div class="flex items-center">
              @!form.input.alt({
                type: 'date',
                name: 'publishAtDate',
                value: flashMessages.get('date') ?? post?.publishAtDateString ?? '',
                errors: flashMessages.get('errors.date'),
                group: true
              })

              @!form.input.alt({
                type: 'time',
                name: 'publishAtTime',
                value: flashMessages.get('time') ?? post?.publishAtTimeString ?? '',
                errors: flashMessages.get('errors.time'),
                group: true
              })
            </div>
          @endslot
        @end

        @form.input.alt({
          type: 'select',
          label: 'Type',
          name: 'postTypeId',
          value: flashMessages.get('postTypeId') ?? post?.postTypeId ?? postTypes.LESSON,
          errors: flashMessages.get('errors.postTypeId')
        })
          <option value="{{ postTypes.LESSON }}">Lesson</option>
          <option value="{{ postTypes.BLOG }}">Blog</option>
          <option value="{{ postTypes.NEWS }}">News</option>
          <option value="{{ postTypes.LIVESTREAM }}">Livestream</option>
          <option value="{{ postTypes.SNIPPET }}">Snippet</option>
          {{--  <option value="{{ postTypes.LINK }}">Link</option>  --}}
        @end

        @form.input.alt({
          type: 'select',
          label: 'Paywall Type',
          name: 'paywallTypeId',
          value: flashMessages.get('paywallTypeId') ?? post?.paywallTypeId ?? PaywallTypes.NONE,
          errors: flashMessages.get('errors.paywallTypeId')
        })
          <option value="{{ PaywallTypes.NONE }}">None - available to all</option>
          <option value="{{ PaywallTypes.DELAYED_RELEASE }}">Delayed Release - paywalled for 2 weeks</option>
          <option value="{{ PaywallTypes.FULL }}">Full - always paywalled</option>
        @end

        <details class="mb-6">
          <summary>Search Engine Optimization (SEO)</summary>

          @!form.input({
            label: 'Page Title',
            name: 'pageTitle',
            placeholder: 'Enter a concise SEO friendly page title. Defaults to the title when left empty',
            value: flashMessages.get('pageTitle') ?? post?.pageTitle ?? '',
            errors: flashMessages.get('errors.pageTitle')
          })

          @!form.input({
            type: 'textarea',
            label: 'Meta Description',
            name: 'metaDescription',
            placeholder: 'Enter a SEO friendly description. Defaults to the summary when left empty.',
            value: flashMessages.get('metaDescription') ?? post?.metaDescription ?? '',
            errors: flashMessages.get('errors.metaDescription'),
            rows: 3,
            max: 255
          })

          @!form.input({
            label: 'Canonical',
            name: 'canonical',
            placeholder: 'Cross-posting from another site? Link the original here',
            value: flashMessages.get('canonical') ?? post?.canonical ?? '',
            errors: flashMessages.get('errors.canonical')
          })
        </details>

        @!form.input.alt({
          label: 'Repository Url',
          name: 'repositoryUrl',
          help: 'Have code associated with this post? Provide the repository url here',
          placeholder: 'Enter the URL to lesson repository',
          value: flashMessages.get('repositoryUrl') ?? post?.repositoryUrl ?? '',
          errors: flashMessages.get('errors.repositoryUrl')
        })

        @form.input.alt({
          type: 'group',
          label: 'Body',
          name: 'body',
          help: 'Type / to see command pallete',
          errors: flashMessages.get('errors.body') ?? flashMessages.get('errors.bodyBlocks')
        })
          @slot('input')
            <input type="hidden" name="bodyTypeId" value="{{ flashMessages.get('bodyTypeId') ?? post?.bodyTypeId ?? 1 }}" />
            @!tiptap.full({ value: flashMessages.get('body') ?? post?.body ?? '' })
          @endslot
        @end
      </div>

      <div class="w-full lg:w-1/3 lg:px-3 -my-3 p-6 shadow-inner bg-gray-50 rounded-lg">
        @form.input.alt({ type: 'group', label: 'Images', help: 'Max image size of 2MB' })
          @slot('input')
            @!form.file.manager({
              postId: post?.id,
              assets: post?.assets,
              placeholder: 'Select and image'
            })
          @endslot
        @end

        @form.input.alt({
          type: 'select',
          label: 'Library Image',
          help: 'Is your image already uploaded? You can find & reuse it here',
          name: 'libraryAssetId'
        })
          <option value="">-- Select from library --</option>
          @each(asset in assets)
            <option value="{{ asset.id }}">{{ asset.filename }}</option>
          @endeach
        @end

        <div x-data="{ videoTypeId: {{ post?.videoTypeId }} }">
          @form.input.alt({
            type: 'select',
            label: 'Video Source',
            help: 'Where is your video coming from?',
            name: 'videoTypeId',
            value: post?.videoTypeId,
            attrs: `@change="videoTypeId = $event.target.value"`
          })
            <option value="">-- Select video source --</option>
            <option value="{{ VideoTypes.YOUTUBE }}">YouTube</option>
            <option value="{{ VideoTypes.BUNNY }}">Bunny Stream</option>
          @end

          <div x-show="videoTypeId == {{ VideoTypes.BUNNY }}" x-data="{ 
            showEmbed: {{ !!post?.videoBunnyId }},
            videoId: '{{ post?.videoBunnyId }}',
            onBlur({ detail }) {
              this.videoId = detail
              this.showEmbed = !!detail
            },
            syncDuration(el) {
              console.log({ el, duration: el.duration })
              document.forms[0].videoSeconds.value = Math.round(el.duration)
            }
          }" @updated="onBlur">
            @form.input.alt({
              label: 'Bunny Video Id',
              name: 'videoBunnyId',
              help: "Enter the Bunny Stream Video Id",
              placeholder: 'Enter video id',
              value: flashMessages.get('videoBunnyId') ?? post?.videoBunnyId ?? '',
              errors: flashMessages.get('errors.videoBunnyId'),
              max: 500
            })
              @slot('after')
                <div id="bunnyPreview" class="aspect-w-16 aspect-h-9 rounded overflow-hidden bg-gray-100 shadow-inner mt-6">
                  <div x-show="!showEmbed">
                    <div class="text-gray-700 flex flex-col h-full w-full items-center justify-center">
                      <svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path></svg>
                      <h4 class="font-semibold">No Video</h4>
                      <p class="text-xs">Enter a valid video id to add a video to this post</p>
                    </div>
                  </div>
                  <template x-if="showEmbed">
                    <video controls @loadedmetadata="syncDuration($el)">
                      <source :src="`https://videos.adocasts.com/${videoId}/play_360p.mp4`" size="360" type="video/mp4" />
                    </video>
                  </template>
                </div>
              @endslot
            @end
          </div>

          <div x-show="videoTypeId == {{ VideoTypes.YOUTUBE }}">
            @form.input.alt({
              label: 'Video URL',
              name: 'videoUrl',
              help: 'Add a YouTube video url to feature a video',
              placeholder: 'Example: https://www.youtube.com/watch?v=kfSGzUcddjU',
              value: flashMessages.get('videoUrl') ?? post?.videoUrl ?? '',
              errors: flashMessages.get('errors.videoUrl'),
              onInput: 'videoManager.onInput(event)',
              dataAttributes: {
                previewSelector: '#videoUrlPreview'
              }
            })
              @slot('after')
                <div id="videoUrlPreview" class="aspect-w-16 aspect-h-9 rounded overflow-hidden bg-gray-100 shadow-inner mt-3">
                  <div id="videoDurationEmbed">
                    <div class="text-gray-700 flex flex-col h-full w-full items-center justify-center">
                      <svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path></svg>
                      <h4 class="font-semibold">No Video</h4>
                      <p class="text-xs">Enter a valid youtube video url to add a video to this post</p>
                    </div>
                  </div>
                </div>
              @endslot
            @end
          </div>

          <div x-show="videoTypeId">
            @!form.input.alt({
              label: 'Video Length (in seconds)',
              name: 'videoSeconds',
              help: 'Will auto populate if your video is public',
              placeholder: 'Enter length of video in seconds',
              value: flashMessages.get('videoSeconds') ?? post?.videoSeconds ?? '',
              errors: flashMessages.get('errors.videoSeconds')
            })
          </div>
        </div>

        <details class="my-6" {{{ flashMessages.get('livestreamUrl') || post?.livestreamUrl ? 'open' : '' }}}>
          <summary class="pb-3 cursor-pointer">Livestream</summary>

          @form.input.alt({
            type: 'group',
            label: 'Live',
            name: 'isLive',
            help: 'Is this stream currently live (or going live soon)',
            errors: flashMessages.get('errors.isLive'),
          })
            @slot('input')
              <label>
                @!form.checkbox({ name: 'isLive', checked: flashMessages.get('isLive') || post?.isLive })
                Is this stream live?
              </label>
            @endslot
          @end

          @form.input.alt({
            label: 'Livestream Url',
            name: 'livestreamUrl',
            help: 'Add an active livestream to this post',
            placeholder: 'Example: https://www.youtube.com/watch?v=kfSGzUcddjU',
            value: flashMessages.get('livestreamUrl') ?? post?.livestreamUrl ?? '',
            errors: flashMessages.get('errors.livestreamUrl'),
            onInput: 'videoManager.onInput(event)',
            dataAttributes: {
              previewSelector: '#livestreamUrlPreview'
            }
          })
            @slot('after')
              <div id="livestreamUrlPreview" class="aspect-w-16 aspect-h-9 rounded overflow-hidden bg-gray-100 shadow-inner mt-3">
                <div class="text-gray-700 flex flex-col h-full w-full items-center justify-center">
                  <svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path></svg>
                  <h4 class="font-semibold">No Video</h4>
                  <p class="text-xs">Enter a valid youtube video url to add a video to this post</p>
                </div>
              </div>
            @endslot
          @end
        </details>

        @form.input.alt({
          type: 'group',
          label: 'Taxonomy',
          help: 'What topics does this post fall under?'
        })
          @slot('input')
            @set('selectedTaxonomyIds', post?.taxonomies.map(t => t.id) ?? [])
            @set('parentIds', [])

            <div class="-mx-6">
              @tree.base({ nodes: taxonomies, className: 'pl-6 border-l border-grey-300' })
                @slot('main', scope)
                  @set('parentIds', scope.node.parentId ? [...parentIds, scope.node.parentId] : [])

                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      name="taxonomyIds[]"
                      value="{{ scope.node.id }}"
                      class="mr-2"
                      data-parent-ids="{{ [...new Set(parentIds)].join(',') }},"
                      onchange="toggleParents(this)"
                      {{ selectedTaxonomyIds.includes(scope.node.id) ? 'checked=checked' : '' }}
                    />

                    <span>{{ scope.node.name }}</span>
                  </label>
                @endslot
              @end
            </div>
          @endslot
        @end
      </div>
    </div>
  </form>

@endsection

@section('scripts')

@entryPointScripts('studio.posts.editor')

<script defer>
  document.addEventListener('DOMContentLoaded', () => {
    document.forms.postForm.timezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone;
    videoManager.onLoad(document.forms.postForm.videoUrl)
  })

  async function saveAs(stateId) {
//     const editorData = await window.editor.save()
//     console.log({ ...editorData })
//     document.forms.postForm.bodyBlocks.value = JSON.stringify(editorData)
//     document.forms.postForm.bodyTypeId.value = 2
    document.forms.postForm.stateId.value = stateId
    document.forms.postForm.submit();
  }

  function toggleParents(el) {
    const parentIds = el.dataset.parentIds
    const selector = parentIds.split(',').map(p => `input[value="${p}"]`).join(',')
    const parents = [...document.querySelectorAll(selector)]

    parents.map(parent => {
      const children = document.querySelectorAll(`input[data-parent-ids*="${parent.value},"]:checked`)

      children.length
        ? parent.setAttribute('checked', 'checked')
        : parent.removeAttribute('checked')
    })
  }
</script>

@endsection
